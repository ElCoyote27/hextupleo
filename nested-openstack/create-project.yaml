- name: HextupleO project creation
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars/openstack_vars.yaml

  tasks:

# Create Projects
######################################3

  -  name: create projects  
     os_project:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ cloud_admin }}"
         password: "{{ admin_password }}"
         project_name: "{{ admin_project }}"
       state: present
       endpoint_type: admin
       name: "{{ project_name }}"
       description: "{{ project_name }}"
       domain_id: "{{ project_name }}"
       enabled: True
       #validate_certs: False
     register: new_projects

  #-  debug:
  #     var: new_projects

# Create Users
#############################################


  -  name: create users
     os_user:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ cloud_admin }}"
         password: "{{ admin_password }}"
         project_name: "{{ admin_project }}"
       state: present
       name: "{{ project_name }}"
       endpoint_type: admin
       password: "{{ project_password }}"
       domain: "{{ project_name }}"
       default_project: "{{ project_name }}"
       validate_certs: False
     register: new_users

  #-  debug:
  #     var: new_users

# Increase project Quotas
#############################################


#unfortunately the os_quota didn't work for cloud without ssl .. maybe a bug in either OpenStack or shade
#  -  name: Increase Quotas
#     os_quota:
#       auth:
#         auth_url: "{{ os_auth }}"
#         username: "{{ cloud_admin }}"
#         password: "{{ admin_password }}"
#         project_name: "{{ admin_project }}"
#       name: "{{ project_name }}"
#       endpoint_type: public
#       cores: 100
#       ram: 122880
#       instances: 15
#       validate_certs: False

  - name: update quota with shell
    shell: openstack --os-auth-url "{{ os_auth }}" --os-project-name "{{ admin_project }}" --os-username "{{ cloud_admin }}" --os-password "{{ admin_password }}" --insecure quota set --instances 15 --cores 100 --ram 122880 "{{ project_name }}"



      
# Create Networks
####################################


  -  name: create networks {{ network_pxe }}
     os_network:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"

       state: present
       name: "{{ network_pxe }}"
       validate_certs: False

  -  name: create networks {{ network_intapi }}
     os_network:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"

       state: present
       name: "{{ network_intapi }}"
       validate_certs: False

  -  name: create networks {{ network_tenant }}
     os_network:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"

       state: present
       name: "{{ network_tenant }}"
       validate_certs: False

  -  name: create networks {{ network_storage }}
     os_network:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"

       state: present
       name: "{{ network_storage }}"
       validate_certs: False

  -  name: create networks {{ network_storagemgmt }}
     os_network:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"

       state: present
       name: "{{ network_storagemgmt }}"
       validate_certs: False

# create subnets
#################################

  -  name: create subnets {{ network_pxe }}
     os_subnet:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"

       state: present
       network_name: "{{ network_pxe }}"
       name: "{{ network_pxe }}subnet"
       enable_dhcp: False
       cidr: 172.16.0.0/24
       validate_certs: False


  -  name: create subnets {{ network_intapi }}
     os_subnet:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       network_name: "{{ network_intapi }}"
       name: "{{ network_intapi }}subnet"
       enable_dhcp: False
       cidr: 172.16.1.0/24
       validate_certs: False

  -  name: create subnets {{ network_tenant }}
     os_subnet:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"

       state: present
       network_name: "{{ network_tenant }}"
       name: "{{ network_tenant }}subnet"
       enable_dhcp: False
       cidr: 172.16.2.0/24
       validate_certs: False

  -  name: create subnets {{ network_storage }}
     os_subnet:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"

       state: present
       network_name: "{{ network_storage }}"
       name: "{{ network_storage }}subnet"
       enable_dhcp: False
       cidr: 172.16.3.0/24
       validate_certs: False

  -  name: create subnets {{ network_storagemgmt }}
     os_subnet:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"

       state: present
       network_name: "{{ network_storagemgmt }}"
       name: "{{ network_storagemgmt }}subnet"
       enable_dhcp: False
       cidr: 172.16.4.0/24
       validate_certs: False

# Create keypair
#####################################

  - name: upload keypair for ansible server
    os_keypair:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: "{{ keypair }}"
       validate_certs: False
       public_key_file: files/id_rsa.pub

# Create Security groups and permissions
############################################

  - name: Create security group
    os_security_group:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: hextupleO
       description: security group for hextupleO servers
       validate_certs: False

  - name: Add rules for icmp - ping
    os_security_group_rule:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       security_group: hextupleO
       protocol: icmp
       remote_ip_prefix: 0.0.0.0/0
       validate_certs: False

  - name: Add rules for all tcp ports
    os_security_group_rule:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       security_group: hextupleO
       protocol: tcp
       port_range_min: 1
       port_range_max: 65535
       remote_ip_prefix: 0.0.0.0/0
       validate_certs: False

  - name: Add rules for all udp ports
    os_security_group_rule:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       security_group: hextupleO
       protocol: udp
       port_range_min: 1
       port_range_max: 65535
       remote_ip_prefix: 0.0.0.0/0
       validate_certs: False



# Create Provisioning Ports and disable security
###########################################
# undercloud
############

  - name: create pxe port for undercloud
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: pxe-undercloud
       network: "{{ network_pxe }}"
       no_security_groups: True
       validate_certs: False

  - name: disable security on provisioning nic for undercloud
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update pxe-undercloud --port-security-enabled=False

# controller
############

## pxe

  - name: create pxe port for controllers
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: pxe-controller{{ item }}
       network: "{{ network_pxe }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ controller_count }}"



  - name: disable security on provisioning nic for controllers
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update pxe-controller"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ controller_count }}"


## internal api


  - name: create internalapi port for controllers
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: intapi-controller{{ item }}
       network: "{{ network_intapi }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ controller_count }}"



  - name: disable security on internalapi nic for controllers
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update intapi-controller"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ controller_count }}"

## tenant


  - name: create tenant port for controllers
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: tenant-controller{{ item }}
       network: "{{ network_tenant }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ controller_count }}"



  - name: disable security on tenant nic for controllers
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update tenant-controller"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ controller_count }}"

## storage


  - name: create storage port for controllers
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}" 
       state: present
       name: storage-controller{{ item }}
       network: "{{ network_storage }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ controller_count }}"



  - name: disable security on storage nic for controllers
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update storage-controller"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ controller_count }}"


## storage mgmt

  - name: create storagemgmt port for controllers
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}" 
       state: present
       name: storagemgmt-controller{{ item }}
       network: "{{ network_storagemgmt }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ controller_count }}"



  - name: disable security on storagemgmt nic for controllers
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update storagemgmt-controller"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ controller_count }}"


## external

  - name: create external port for controllers
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}" 
       state: present
       name: "{{ project_name }}-external-controller{{ item }}"
       network: "{{ network_external }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ controller_count }}"



  - name: disable security on external nic for controllers
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ cloud_admin }}" --os-username "{{ cloud_admin }}" --os-password "{{ admin_password }}" --insecure port-update {{ project_name }}-external-controller"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ controller_count }}"





# Create instackenv.json file to be used by project - Controller
###############################################
  
  - name: make sure old instackenv.json is not there
    file:
      path: files/instackenv/{{ project_name }}instackenv.json
      state: absent

  
  - name: start creating instackenv.json file for the project 
    blockinfile:
      path: files/instackenv/{{ project_name }}instackenv.json
      create: yes
      block: |
        {
            "nodes":[

  - name: gather mac addresses for provisioning nic - controllers
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-show pxe-controller"{{ item }}" | grep mac_address | awk {'print $4'}
    register: maccontrollers
    with_sequence:
       count="{{ controller_count }}"



  - name: append controller info
    blockinfile:
      path: files/instackenv/{{ project_name }}instackenv.json
      insertafter: EOF
      marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.stdout }}"
      block: |
        # controller{{ item.item }}
                {    
                    "mac":[
                        "{{ item.stdout }}"
                    ],
                    "cpu":"2",
                    "memory":"4096",
                    "disk":"40",
                    "arch":"x86_64",
                    "pm_type":"pxe_ipmitool",
                    "name":"controller{{ item.item }}",
                    "capabilities": "profile:control",
                    "pm_user":"{{ project_name }}",
                    "pm_password":"{{ project_password }}",
                    "pm_addr":"{{ os_auth }}/controller{{ item.item }}"
        
                },
    with_items: "{{ maccontrollers.results }}"





# compute
############

## pxe

  - name: create pxe port for compute
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: pxe-compute{{ item }}
       network: "{{ network_pxe }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ compute_count }}"


  - name: disable security on provisioning nic for compute
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update pxe-compute"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ compute_count }}"

## internal api 

  - name: create internal api port for compute
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: intapi-compute{{ item }}
       network: "{{ network_intapi }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ compute_count }}"


  - name: disable security on Internal API nic for compute
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update intapi-compute"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ compute_count }}"


## tenant


  - name: create tenant port for compute
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: tenant-compute{{ item }}
       network: "{{ network_tenant }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ compute_count }}"


  - name: disable security on tenant nic for compute
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update tenant-compute"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ compute_count }}"


## storage

  - name: create storage port for compute
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: storage-compute{{ item }}
       network: "{{ network_storage }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ compute_count }}"


  - name: disable security on storage nic for compute
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update storage-compute"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ compute_count }}"




# Create instackenv.json file to be used by project - Compute
###############################################



  - name: gather mac addresses for provisioning nic - computes
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-show pxe-compute"{{ item }}" | grep mac_address | awk {'print $4'}
    register: maccompute
    with_sequence:
       count="{{ compute_count }}"



  - name: append compute info
    blockinfile:
      path: files/instackenv/{{ project_name }}instackenv.json
      insertafter: EOF
      marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.stdout }}"
      block: |
        # compute{{ item.item }}
                {
                    "mac":[
                        "{{ item.stdout }}"
                    ],
                    "cpu":"2",
                    "memory":"4096",
                    "disk":"40",
                    "arch":"x86_64",
                    "pm_type":"pxe_ipmitool",
                    "name":"compute{{ item.item }}",
                    "capabilities": "profile:compute",
                    "pm_user":"{{ project_name }}",
                    "pm_password":"{{ project_password }}",
                    "pm_addr":"{{ os_auth }}/compute{{ item.item }}"

                },
    with_items: "{{ maccompute.results }}"


# ceph
############

## pxe

  - name: create pxe port for ceph
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: pxe-ceph{{ item }}
       network: "{{ network_pxe }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ ceph_count }}"


  - name: disable security on provisioning nic for ceph
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update pxe-ceph"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ ceph_count }}"


## storage

  - name: create storage port for ceph
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: storage-ceph{{ item }}
       network: "{{ network_storage }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ ceph_count }}"


  - name: disable security on storage nic for ceph
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update storage-ceph"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ ceph_count }}"

## storage mgmt

  - name: create storage mgmt port for ceph
    os_port:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: storagemgmt-ceph{{ item }}
       network: "{{ network_storagemgmt }}"
       no_security_groups: True
       validate_certs: False
    with_sequence:
       count="{{ ceph_count }}"


  - name: disable security on storage mgmt nic for ceph
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-update storagemgmt-ceph"{{ item }}" --port-security-enabled=False
    with_sequence:
       count="{{ ceph_count }}"




# Create instackenv.json file to be used by project - Ceph
###############################################



  - name: gather mac addresses for provisioning nic - ceph
    shell: neutron --os-auth-url "{{ os_auth }}" --os-project-name "{{ project_name }}" --os-username "{{ project_name }}" --os-password "{{ project_password }}" --insecure port-show pxe-ceph"{{ item }}" | grep mac_address | awk {'print $4'}
    register: macceph
    with_sequence:
       count="{{ ceph_count }}"



  - name: append ceph info
    blockinfile:
      path: files/instackenv/{{ project_name }}instackenv.json
      insertafter: EOF
      marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.stdout }}"
      block: |
        # ceph{{ item.item }}
                {
                    "mac":[
                        "{{ item.stdout }}"
                    ],
                    "cpu":"2",
                    "memory":"4096",
                    "disk":"40",
                    "arch":"x86_64",
                    "pm_type":"pxe_ipmitool",
                    "name":"ceph{{ item.item }}",
                    "capabilities": "profile:ceph-storage",
                    "pm_user":"{{ project_name }}",
                    "pm_password":"{{ project_password }}",
                    "pm_addr":"{{ os_auth }}/ceph{{ item.item }}"

                },
    with_items: "{{ macceph.results }}"

# Finish up the instackenv.json file
##############################



  - name: remove last line with comma
    lineinfile:
      path: files/instackenv/{{ project_name }}instackenv.json
      state: present
      regexp: ','
      line: ''
  
  - name: finish instackenv.json file
    blockinfile:
      path: files/instackenv/{{ project_name }}instackenv.json
      create: yes
      insertafter: EOF      
      marker: "# {mark} ANSIBLE MANAGED BLOCK END"
      block: |
        # finish
                }
            ]
        }

  - name: remove all the comments
    lineinfile:
      path: files/instackenv/{{ project_name }}instackenv.json
      state: absent
      regexp: '^#'



# Create Instances
#######################################

  - name: deploy instance undercloud
    os_server:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: undercloud
       image: "{{ rhel_image }}"
       key_name: "{{ keypair }}"
       #timeout: 200
       flavor: "{{ flavor_undercloud }}"
       auto_ip: no
       security_groups: hextupleO
       validate_certs: False
       nics:
         - net-name: "{{ network_infra_ext }}"
         - port-name: pxe-undercloud
    register: undercloud

  - name: deploy instance ceph
    os_server:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: ceph{{ item }}
       image: "{{ pxe_image }}"
       key_name: "{{ keypair }}"
       #timeout: 200
       flavor: "{{ flavor_ceph }}"
       auto_ip: no
       security_groups: hextupleO
       validate_certs: False
       nics:
         - port-name: pxe-ceph{{ item }}
         - port-name: storage-ceph{{ item }}
         - port-name: storagemgmt-ceph{{ item }}
    with_sequence:
       count="{{ ceph_count }}"
    async: 7200
    poll: 0
    register: ceph_instances



  - name: deploy instance controllers
    os_server:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: controller{{ item }}
       image: "{{ pxe_image }}"
       key_name: "{{ keypair }}"
       #timeout: 200
       flavor: "{{ flavor_controller }}"
       auto_ip: no
       security_groups: hextupleO
       validate_certs: False
       nics:
         - port-name: pxe-controller{{ item }}
         - port-name: intapi-controller{{ item }}
         - port-name: tenant-controller{{ item }}
         - port-name: storage-controller{{ item }}
         - port-name: storagemgmt-controller{{ item }}
         - port-name: "{{ project_name }}-external-controller{{ item }}"
    with_sequence:
       count="{{ controller_count }}"
    async: 7200
    poll: 0
    register: controller_instances

  - name: deploy instance compute
    os_server:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       name: compute{{ item }}
       image: "{{ pxe_image }}"
       key_name: "{{ keypair }}"
       #timeout: 200
       flavor: "{{ flavor_compute }}"
       auto_ip: no
       security_groups: hextupleO
       validate_certs: False
       nics:
         - port-name: pxe-compute{{ item }}
         - port-name: intapi-compute{{ item }}
         - port-name: tenant-compute{{ item }}
         - port-name: storage-compute{{ item }}
    with_sequence:
       count="{{ compute_count }}"
    async: 7200
    poll: 0
    register: compute_instances


# Create volumes for ceph
############################


  - name: Wait for ceph-instance creation to complete
    async_status: jid={{ item.ansible_job_id }}
    register: ceph_jobs
    until: ceph_jobs.finished
    retries: 300
    with_items: "{{ ceph_instances.results }}"



  - name: stop instance ceph
    os_server_actions:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       action: stop
       validate_certs: False
       server: ceph{{ item }}
    async: 7200
    poll: 0
    register: ceph_stop
    with_sequence:
       count="{{ ceph_count }}"




  - name: create volume for ceph
    os_volume:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       size: "{{ ceph_disk_size }}"
       display_name: ceph-volume{{ item }}
       validate_certs: False
    with_sequence:
       count="{{ ceph_count }}"


  - name: Wait for ceph-instance to stop
    async_status: jid={{ item.ansible_job_id }}
    register: cephstop_jobs
    until: cephstop_jobs.finished
    retries: 300
    with_items: "{{ ceph_stop.results }}"



  - name: attach volumes to ceph-hosts
    os_server_volume:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       state: present
       server: ceph{{ item }}
       volume: ceph-volume{{ item }}
       validate_certs: False
    with_sequence:
       count="{{ ceph_count }}"



# Stop Instances
#########################


  - name: Wait for controller-instance creation to complete
    async_status: jid={{ item.ansible_job_id }}
    register: controller_jobs
    until: controller_jobs.finished
    retries: 300
    with_items: "{{ controller_instances.results }}"



  - name: stop instance controllers
    os_server_actions:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       action: stop
       validate_certs: False
       server: controller{{ item }}
    async: 45
    poll: 0
    with_sequence:
       count="{{ controller_count }}"


  - name: Wait for compute-instance creation to complete
    async_status: jid={{ item.ansible_job_id }}
    register: compute_jobs
    until: compute_jobs.finished
    retries: 300
    with_items: "{{ compute_instances.results }}"


  - name: stop instance computes
    os_server_actions:
       auth:
         auth_url: "{{ os_auth }}"
         username: "{{ project_name }}"
         password: "{{ project_password }}"
         project_name: "{{ project_name }}"
       action: stop
       validate_certs: False
       server: compute{{ item }}
    async: 45
    poll: 0
    with_sequence:
       count="{{ compute_count }}"



# Prepare undercloud
##################################

  - name: add undercloud to ansible inventory
    add_host:
       name: undercloud
       groups: openstack
       ansible_host: "{{undercloud.server.public_v4}}"
       ansible_user: cloud-user
       ansible_become: true


  - name: verify undercloud is up and reachable
    command: >
      ssh -o BatchMode=yes -o StrictHostKeyChecking=no
      cloud-user@{{undercloud.server.public_v4}} true
    register: result
    until: result|success
    retries: 10
    delay: 5



- hosts: undercloud
  name: Make changes to undercloud
  vars_files:
    - vars/openstack_vars.yaml

  tasks:
  - name: upload yum repo file to image
    copy: src=files/{{ osp }}/{{ osp }}.repo dest=/etc/yum.repos.d/
    become: yes
  - name: ensure ipmi is at the latest version
    yum: name=ipmitool state=latest
    become: yes
  - name: create user stack and set his permissions
    shell: useradd stack
    become: yes
  - shell: echo "{{ project_password }}" | passwd stack --stdin
    become: yes
  - shell: echo "stack ALL=(root) NOPASSWD:ALL" | tee -a /etc/sudoers.d/stack
    become: yes
  - shell: chmod 0440 /etc/sudoers.d/stack
    become: yes
  - lineinfile:
      path: /etc/ssh/sshd_config
      regexp: "PasswordAuthentication no"
      line: "PasswordAuthentication yes"
  - service:
      name: sshd
      state: restarted

  - name: Create Stack sub-directories
    file:
      path: /home/stack/{{ item }}
      state: directory
      mode: 0755
      owner: stack
      group: stack
    with_items:
       - GoodieBag
       - images
       - templates
       - templates/nic-config


  - name: create undercloud.conf
    template:
      src: files/{{ osp }}/undercloud-{{ osp }}.j2
      dest: "/home/stack/undercloud.conf"
      mode: 0744
      owner: stack
      group: stack

  - name: create rebuild-nodes.sh
    template:
      src: files/rebuild-nodes.j2
      dest: "/home/stack/GoodieBag/rebuild-nodes.sh"
      mode: 0744
      owner: stack
      group: stack


  - name: copy instackenv to GoodieBag
    copy: src=files/instackenv/{{ project_name }}instackenv.json dest=/home/stack/GoodieBag/instackenv.json owner=stack group=stack mode=0744




  - name: copy Goodies to GoodieBag to stack
    copy: src=files/{{ item }} dest=/home/stack/GoodieBag/ owner=stack group=stack mode=0744
    with_items:
      - ipmitool
      - deploy.sh



  - name: install fix-ironic daemon 1
    copy: src=files/fix-ironic dest=/usr/bin/ owner=root group=root mode=0755
    become: yes

  - name: install fix-ironic daemon 2
    copy: src=files/fix-ironic.service dest=/usr/lib/systemd/system/ owner=root group=root mode=0644
    become: yes

  - name: issue daemon-reload to pick up config changes
    systemd:
      state: restarted
      daemon_reload: yes
      name: fix-ironic
      enabled: yes
    become: yes



  - name: create network-environment.yaml
    template:
      src: files/{{ osp }}/network-environment.j2
      dest: "/home/stack/templates/network-environment.yaml"
      mode: 0644
      owner: stack
      group: stack


  - name: copy storage-environment.yaml
    copy: src=files/{{ osp }}/{{ item }} dest=/home/stack/templates/ owner=stack group=stack mode=0644
    with_items:
      - storage-environment.yaml
      - wipe-disk.sh
      - wipe-disks.yaml



  - name: copy network-templates
    copy: src=files/{{ osp }}/{{ item }} dest=/home/stack/templates/nic-config/ owner=stack group=stack mode=0644
    with_items:
      - controller.yaml
      - compute.yaml
      - ceph-storage.yaml

 


  - name: upgrade all packages
    yum: name="*" state=latest
  - name: install tools
    yum: name="{{ item }}" state=latest
    with_items:
      - libvirt
      - wget
      - telnet
      - xauth
      - libguestfs-tools
      - git
      - vim-enhanced
      - screen
      - bash-completion



  - name: display public ip
    debug:
      var: ansible_host


  - name: ALL DONE
    debug:
      msg: "WE ARE ALL DONE .. Happy hacking!"

